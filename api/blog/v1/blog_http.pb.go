// Code generated by github.com/sunyuan300/protoc-gen-go-http. DO NOT EDIT.

package v1

import (
	context "context"
	errors "errors"
	gin "github.com/gin-gonic/gin"
	metadata "google.golang.org/grpc/metadata"
)

// context.metadata.
//gin.errors.

type BlogServiceHTTPServer interface {
	CreateArticle(context.Context, *CreateArticleRequest) (*CreateArticleReply, error)

	DeleteArticle(context.Context, *DeleteArticleRequest) (*DeleteArticleReply, error)

	GetArticle(context.Context, *GetArticleRequest) (*GetArticleReply, error)

	ListArticle(context.Context, *ListArticleRequest) (*ListArticleReply, error)

	UpdateArticle(context.Context, *UpdateArticleRequest) (*UpdateArticleReply, error)
}

func RegisterBlogServiceHTTPServer(r gin.IRouter, srv BlogService) {
	s := BlogService{
		server: srv,
		router: r,
	}
	s.RegisterService()
}

type BlogService struct {
	server BlogService
	router gin.IRouter
}

func (s *BlogService) CreateArticle(ctx *gin.Context) {
	var in CreateArticleRequest
	if err := ctx.BindJSON(&in); err != nil {
		return
	}
	out, err := s.server.(BlogService).CreateArticle(ctx, &in)
	if err != nil {
		return
	}
}

func (s *BlogService) UpdateArticle(ctx *gin.Context) {
	var in UpdateArticleRequest
	if err := ctx.BindJSON(&in); err != nil {
		return
	}
	out, err := s.server.(BlogService).UpdateArticle(ctx, &in)
	if err != nil {
		return
	}
}

func (s *BlogService) DeleteArticle(ctx *gin.Context) {
	var in DeleteArticleRequest
	if err := ctx.BindJSON(&in); err != nil {
		return
	}
	out, err := s.server.(BlogService).DeleteArticle(ctx, &in)
	if err != nil {
		return
	}
}

func (s *BlogService) GetArticle(ctx *gin.Context) {
	var in GetArticleRequest
	if err := ctx.BindJSON(&in); err != nil {
		return
	}
	out, err := s.server.(BlogService).GetArticle(ctx, &in)
	if err != nil {
		return
	}
}

func (s *BlogService) ListArticle(ctx *gin.Context) {
	var in ListArticleRequest
	if err := ctx.BindJSON(&in); err != nil {
		return
	}
	out, err := s.server.(BlogService).ListArticle(ctx, &in)
	if err != nil {
		return
	}
}

func (s *BlogService) RegisterService() {

	s.router.Handle("POST", "/v1/article/", s.CreateArticle)

	s.router.Handle("PUT", "/v1/article/{id}", s.UpdateArticle)

	s.router.Handle("DELETE", "/v1/article/{id}", s.DeleteArticle)

	s.router.Handle("GET", "/v1/article/{id}", s.GetArticle)

	s.router.Handle("GET", "/v1/article/", s.ListArticle)

}
